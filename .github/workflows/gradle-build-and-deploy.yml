name: Gradle Build and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build without tests
        run: ./gradlew clean build -x test

      - name: Check built JARs
        run: |
          echo "=== build/libs 디렉토리 내용 확인 ==="
          ls -al build/libs || true

      - name: Copy JAR
        run: |
          mkdir -p build/docker
          cp build/libs/*-SNAPSHOT.jar build/docker/app.jar

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/air-core-dev-be-images:latest

      - name: SSH and deploy with docker compose
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.GCE_HOST }}
          username: ${{ secrets.GCE_USER }}
          key: ${{ secrets.GCE_SSH_KEY }}
          script: |
            cd /home/ubuntu/rowing/springboot
            docker compose down || true
            docker compose pull
            docker compose up -d
            docker compose ps

      - name: Send Success Discord Notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -d "{\"content\": \"**✅ 배포 성공!** :rocket:\n저장소: \`${repo_name}\`\n브랜치: \`${{ github.ref_name }}\`\n빌드 및 배포가 완료되었습니다.\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
            
      - name: Send Failure Discord Notification
        if: failure()
        run: |
          outcome_message=""
          if [ "${{ steps.build.outcome }}" == "failure" ]; then
            outcome_message+="빌드 단계에서 오류 발생.\n"
          fi
          if [ "${{ steps.docker_build.outcome }}" == "failure" ]; then
            outcome_message+="Docker 빌드 단계에서 오류 발생.\n"
          fi
          if [ "${{ steps.deploy.outcome }}" == "failure" ]; then
            outcome_message+="배포 단계에서 오류 발생.\n"
          fi
          curl -H "Content-Type: application/json" \
            -d "{\"content\": \"**❌ 배포 실패!** :x:\n저장소: \`${repo_name}\`\n브랜치: \`${{ github.ref_name }}\`\n에러가 발생했습니다. 자세한 내용은 GitHub Actions 로그를 확인하세요.\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
